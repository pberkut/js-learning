{"mappings":"AAkI4B,IAAAA,KAiBR,QAhBX,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,QAAQC,IAAI,qBAAqBL,KAEjCM,YAAW,KAKPJ,EAAQ,gBAED,GAER,SAKJK,MAAKC,GAAQJ,QAAQC,IAAIG,KACzBC,OAAMC,GAASN,QAAQM,MAAMA","sources":["src/js/module-9/script-module-9.js"],"sourcesContent":["// * Example\n// console.log('First log');\n\n// setTimeout(() => {\n//   console.log('Second log');\n// }, 2000);\n\n// console.log('Third log');\n\n// * Example\n// const greet = () => {\n//   console.log('Hello! 12');\n// };\n// const timerId = setTimeout(greet, 1000);\n// clearTimeout(timerId);\n\n// * Example\n// const intervalId = setInterval(() => {\n//   console.log(`Hello! ${Math.random()}`);\n// }, 1000);\n\n// clearInterval(intervalId);\n\n// * Example\n// const date = new Date();\n// console.dir(date);\n\n// console.dir(date.toString());\n\n// console.log(new Date(0));\n// console.log(new Date(15_000));\n\n// console.log(date.getTime());\n// console.log(date.getHours());\n\n// * Web workers, Service workers, Worklets\n// const myWorker = new Worker(new URL('./workers/worker.js', import.meta.url), { type: 'module' });\n\n// // Send message to worker\n// myWorker.postMessage('Hello!');\n\n// // Receive message from worker\n// myWorker.onmessage = function (e) {\n//   console.log(e.data);\n// };\n\n// * Example setTimeout\n// const logger = time => {\n//   console.log(`Log times: ${time}`);\n// };\n\n// const timerId01 = setTimeout(logger, 1000, 1000);\n// const timerId02 = setTimeout(logger, 500, 500);\n\n// console.log(timerId01);\n// console.log(timerId02);\n\n// const shouldCancelTimer = Math.random() > 0.3;\n// console.log(shouldCancelTimer);\n\n// if (shouldCancelTimer) {\n//   clearTimeout(timerId02);\n// }\n\n// * Example setInterval\n// const logger = time => {\n//   console.log(`Log times: ${time}. ${Date.now()}`);\n// };\n\n// const intervalId01 = setInterval(logger, 2000, 2000);\n// const intervalId02 = setInterval(logger, 1000, 1000);\n\n// console.log(intervalId01);\n// console.log(intervalId02);\n\n// const shouldCancelInterval = Math.random() > 0.3;\n// console.log('Canceled interval:', shouldCancelInterval);\n\n// if (shouldCancelInterval) {\n//   clearInterval(intervalId02);\n// }\n\n// * Event loop\n\n// * Promise\n// Change value of isSuccess variable to call resolve or reject\n// const isSuccess = false;\n\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     if (isSuccess) {\n//       resolve('Success! Value passed to resolve function');\n//     } else {\n//       reject('Error! Error passed to reject function');\n//     }\n//   }, 2000);\n// });\n\n// promise\n//   .then(value => console.log(value)) // \"Success! Value passed to resolve function\"\n//   .catch(error => console.log(error)) // \"Error! Error passed to reject function\"\n//   .finally(() => console.log('Promise settled')); // \"Promise settled\"\n\n//  * Example\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     resolve(5);\n//   }, 2000);\n// });\n\n// promise\n//   .then(value => {\n//     console.log(value); // 5\n//     return value * 2;\n//   })\n//   .then(value => {\n//     console.log(value); // 10\n//     return value * 3;\n//   })\n//   .then(value => {\n//     console.log(value); // 30\n//   })\n//   .catch(error => {\n//     console.log(error);\n//   })\n//   .finally(() => {\n//     console.log('Final task');\n//   });\n\n// * Exapmple\nconst fetchUserFromServer = username => {\n  return new Promise((resolve, reject) => {\n    console.log(`Fetching data for ${username}`);\n\n    setTimeout(() => {\n      // Change value of isSuccess variable to simulate request status\n      const isSuccess = true;\n\n      if (isSuccess) {\n        resolve('success value');\n      } else {\n        reject('error');\n      }\n    }, 2000);\n  });\n};\n\nfetchUserFromServer('Mango')\n  .then(user => console.log(user))\n  .catch(error => console.error(error));\n"],"names":["username","Promise","resolve","reject","console","log","setTimeout","then","user","catch","error"],"version":3,"file":"module-9.19b8a412.js.map"}